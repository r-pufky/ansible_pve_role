---
###############################################################################
# Get VM Configuration & Duplicate Status
###############################################################################
# Determine if the container already exists in the cluster and generate the
# parsed pve_kvm option using the integrated library. Setup variables to use
# for the rest of KVM processing.
#
# Mirrored config in lxc/tasks/config.yml. Even though the variables are
# executed in blocks originally, the first block registered results will be
# overwritten with the second blocks registered results (with an uninitialized
# variable); resulting in failure of dupe detection / variable undefined.
#
# Use 'qm status' to get existing cluster vms (kvm) status.
#
# Exit codes captured:
#   0: vm exists
#   2: vm does not exist
#
# Args:
#   host: dict host dictionary (pve_kvm) to process data for.
#   pve_image_map: dict disk image metadata for VM creation.
#   pve_cloud_init_cache: string location of cloudinit images on cluster node.
#   pve_vm_disk_location: string cluster node qemu VM disk location.
#
# Generates:
#   _pve_vm: dict kvm_config parse options.
#   _pve_vm_exists: boolean true if the VM already exists.
#   _pve_vm_disk_resize: boolean true if any VM disk has been resized.
#   _pve_cloud_init_disk: string full local path disk image ready to import
#       into vm.
#   _pve_cloud_init_disk_template: string full local path for staging the
#       decompressed, but not converted disk image.
#
# Reference:
# * https://pve.proxmox.com/pve-docs/qm.1.html
# * https://pve.proxmox.com/pve-docs/pve-admin-guide.html

- name: '{{ host.value.pve_kvm.vmid }} | parse config'
  kvm_config:
    vmid:       '{{ host.value.pve_kvm.vmid }}'
    node:       '{{ host.value.pve_kvm.node }}'
    template:   '{{ pve_image_map[host.value.pve_kvm.template]|default(omit) }}'
    force_stop: '{{ host.value.pve_kvm.force_stop|default(omit) }}'
    cloud_init: '{{ host.value.pve_kvm.cloud_init|default(omit) }}'
    firewall:   '{{ host.value.pve_lxc.firewall|default(omit) }}'
    config:     '{{ host.value.pve_kvm.config  }}'
  register: _pve_vm

- name: '{{ _pve_vm.vmid }} | set options'
  ansible.builtin.set_fact:
    _pve_vm_exists:       false
    _pve_vm_disk_resize:  false
    _pve_cloud_init_disk: '{% if "tar" in _pve_vm.template.extension %}{{ pve_vm_disk_location }}/{{ _pve_vm.template.name }}.raw{% else %}{{ pve_vm_disk_location }}/{{ _pve_vm.template.name }}.{{ _pve_vm.root.format }}{% endif %}'
    _pve_cloud_init_disk_template: '{% if "tar" in _pve_vm.template.extension %}{{ pve_cloud_init_cache }}/{{ _pve_vm.template.name }}.raw{% else %}{{ pve_cloud_init_cache }}/{{ _pve_vm.template.name }}.{{ _pve_vm.root.format }}{% endif %}'

- name: '{{ _pve_vm.vmid }} | determine cluster vm status'
  ansible.builtin.command: 'qm status {{ _pve_vm.vmid }}'
  changed_when: false
  register: _pve_cluster_vm_status
  failed_when: _pve_cluster_vm_status.rc not in (0, 2)
  delegate_to: '{{ _pve_vm.node }}'

- name: '{{ _pve_vm.vmid }} | determine if vm exists'
  ansible.builtin.set_fact:
    _pve_vm_exists: true
  when: _pve_cluster_vm_status.rc == 0

- name: '{{ _pve_vm.vmid }} | ensure cloud init cache location exists'
  ansible.builtin.file:
    path:  '{{ pve_cloud_init_cache }}'
    owner: 'root'
    group: 'root'
    mode:  0755
    state: 'directory'
  delegate_to: '{{ _pve_vm.node }}'
  when: _pve_vm.cloud_init|length > 0
